import arcpy
import os
import csv

# Rutas de la Geodatabase (GDB) y la capa de predios
gdb_path = r"D:\2.0 ANT - DAT\INFORMACION GEOGRAFICA\CRUCES_MUNICIPIOS_08012025_DAT.gdb"
predios_layer = r"D:\2.0 ANT - DAT\SHAPE GARZON\shape_prueba\5predios.shp"

# Comprobar la existencia del shapefile antes de continuar
if not arcpy.Exists(predios_layer):
    print("ERROR: No se encontró el archivo shapefile con la ruta: {}".format(predios_layer))
    raise SystemExit

# Ruta de salida del archivo CSV (CAMBIAR A UNA CARPETA MÁS ACCESIBLE)
csv_output_path = r"C:\Temp\reporte_interseccion_restricciones.csv"

# Eliminar el archivo CSV si ya existe
if os.path.exists(csv_output_path):
    try:
        os.remove(csv_output_path)
        print("Archivo existente eliminado: {}".format(csv_output_path))
    except Exception as e:
        print("No se pudo eliminar el archivo existente. Error: {}".format(e))
        raise SystemExit

# Listas para almacenar los resultados
resultados_csv = [["Feature Dataset", "Capa de Restricción", "Resultado"]]

# Establecer el entorno de trabajo en el Feature Dataset de Restricciones
feature_dataset = "RESTRICCION_COMPRAS_2025"
arcpy.env.workspace = os.path.join(gdb_path, feature_dataset)

# Obtener todas las capas dentro del Feature Dataset de Restricciones
capas = arcpy.ListFeatureClasses()

# Recorrer cada capa de restricciones y comprobar la intersección espacial con la capa de predios
for index, capa in enumerate(capas):
    capa_ruta = os.path.join(arcpy.env.workspace, capa)
    output_intersect = "in_memory/intersect_output_{}".format(index)  # Nombre dinámico sin f-strings

    if not arcpy.Exists(capa_ruta):
        print("ERROR: La capa no existe o no es compatible: {}".format(capa_ruta))
        resultados_csv.append([feature_dataset, capa, "No encontrada o no compatible"])
        continue
    
    try:
        # Eliminar cualquier resultado temporal existente en la memoria
        if arcpy.Exists(output_intersect):
            arcpy.Delete_management(output_intersect)
        
        # Realizar la intersección espacial con un nombre dinámico
        resultado_interseccion = arcpy.analysis.Intersect([predios_layer, capa_ruta], output_intersect)

        # Contar las entidades resultantes de la intersección
        conteo = int(arcpy.GetCount_management(resultado_interseccion)[0])

        if conteo > 0:
            resultados_csv.append([feature_dataset, capa, "Cruza"])
        else:
            resultados_csv.append([feature_dataset, capa, "No Cruza"])

        # Limpiar la memoria temporal
        arcpy.Delete_management(output_intersect)

    except Exception as e:
        print("Error al procesar la capa {}: {}".format(capa, e))
        resultados_csv.append([feature_dataset, capa, "Error: {}".format(str(e))])

# Escribir los resultados en un archivo CSV (modo binario para Python 2.7)
try:
    with open(csv_output_path, mode='wb') as file:
        writer = csv.writer(file)
        writer.writerows(resultados_csv)

    print("\nEl reporte ha sido guardado en: {}".format(csv_output_path))
except Exception as e:
    print("Error al guardar el archivo CSV: {}".format(e))
